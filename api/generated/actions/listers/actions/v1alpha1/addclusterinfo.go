/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/odigos-io/odigos/api/actions/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AddClusterInfoLister helps list AddClusterInfos.
// All objects returned here must be treated as read-only.
type AddClusterInfoLister interface {
	// List lists all AddClusterInfos in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AddClusterInfo, err error)
	// AddClusterInfos returns an object that can list and get AddClusterInfos.
	AddClusterInfos(namespace string) AddClusterInfoNamespaceLister
	AddClusterInfoListerExpansion
}

// addClusterInfoLister implements the AddClusterInfoLister interface.
type addClusterInfoLister struct {
	indexer cache.Indexer
}

// NewAddClusterInfoLister returns a new AddClusterInfoLister.
func NewAddClusterInfoLister(indexer cache.Indexer) AddClusterInfoLister {
	return &addClusterInfoLister{indexer: indexer}
}

// List lists all AddClusterInfos in the indexer.
func (s *addClusterInfoLister) List(selector labels.Selector) (ret []*v1alpha1.AddClusterInfo, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AddClusterInfo))
	})
	return ret, err
}

// AddClusterInfos returns an object that can list and get AddClusterInfos.
func (s *addClusterInfoLister) AddClusterInfos(namespace string) AddClusterInfoNamespaceLister {
	return addClusterInfoNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AddClusterInfoNamespaceLister helps list and get AddClusterInfos.
// All objects returned here must be treated as read-only.
type AddClusterInfoNamespaceLister interface {
	// List lists all AddClusterInfos in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AddClusterInfo, err error)
	// Get retrieves the AddClusterInfo from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AddClusterInfo, error)
	AddClusterInfoNamespaceListerExpansion
}

// addClusterInfoNamespaceLister implements the AddClusterInfoNamespaceLister
// interface.
type addClusterInfoNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AddClusterInfos in the indexer for a given namespace.
func (s addClusterInfoNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AddClusterInfo, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AddClusterInfo))
	})
	return ret, err
}

// Get retrieves the AddClusterInfo from the indexer for a given namespace and name.
func (s addClusterInfoNamespaceLister) Get(name string) (*v1alpha1.AddClusterInfo, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("addclusterinfo"), name)
	}
	return obj.(*v1alpha1.AddClusterInfo), nil
}
