/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/odigos-io/odigos/api/actions/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DeleteAttributeLister helps list DeleteAttributes.
// All objects returned here must be treated as read-only.
type DeleteAttributeLister interface {
	// List lists all DeleteAttributes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DeleteAttribute, err error)
	// DeleteAttributes returns an object that can list and get DeleteAttributes.
	DeleteAttributes(namespace string) DeleteAttributeNamespaceLister
	DeleteAttributeListerExpansion
}

// deleteAttributeLister implements the DeleteAttributeLister interface.
type deleteAttributeLister struct {
	indexer cache.Indexer
}

// NewDeleteAttributeLister returns a new DeleteAttributeLister.
func NewDeleteAttributeLister(indexer cache.Indexer) DeleteAttributeLister {
	return &deleteAttributeLister{indexer: indexer}
}

// List lists all DeleteAttributes in the indexer.
func (s *deleteAttributeLister) List(selector labels.Selector) (ret []*v1alpha1.DeleteAttribute, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeleteAttribute))
	})
	return ret, err
}

// DeleteAttributes returns an object that can list and get DeleteAttributes.
func (s *deleteAttributeLister) DeleteAttributes(namespace string) DeleteAttributeNamespaceLister {
	return deleteAttributeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DeleteAttributeNamespaceLister helps list and get DeleteAttributes.
// All objects returned here must be treated as read-only.
type DeleteAttributeNamespaceLister interface {
	// List lists all DeleteAttributes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DeleteAttribute, err error)
	// Get retrieves the DeleteAttribute from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DeleteAttribute, error)
	DeleteAttributeNamespaceListerExpansion
}

// deleteAttributeNamespaceLister implements the DeleteAttributeNamespaceLister
// interface.
type deleteAttributeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DeleteAttributes in the indexer for a given namespace.
func (s deleteAttributeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DeleteAttribute, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeleteAttribute))
	})
	return ret, err
}

// Get retrieves the DeleteAttribute from the indexer for a given namespace and name.
func (s deleteAttributeNamespaceLister) Get(name string) (*v1alpha1.DeleteAttribute, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("deleteattribute"), name)
	}
	return obj.(*v1alpha1.DeleteAttribute), nil
}
